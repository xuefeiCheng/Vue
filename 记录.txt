本学习历程 根据 Vue.js中文文档【https://cn.vuejs.org/v2/guide/instance.html】学习
官方文档为【https://vuejs.org/v2/guide/syntax.html】
兼容性问题：vue.js不支持ie8以下的浏览器，原因是：ie8以下不能支持es5。
使用方式：直接使用 script 标签引入即可。或者使用 cdn
注：在使用vue.js构建大型应用时，推荐使用npm构建应用。
在学习vue.js时，没有使用 npm，下载的js文件是 开发环境所使用的（能够给出错误友好提示）；

自定义组件与自定义元素感觉很相似；
注意：使用自定义组件时，首先要先 注册组件，之后，才可以在根实例或者模板中使用
1.Web 组件规范仍然处于草案阶段，并且尚无浏览器原生实现。相比之下，Vue 组件不需要任何补丁，并且在所有支持的浏览器（IE9 及更高版本）之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。
2.Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流，自定义事件通信以及构建工具集成。
其中自定义组件，可以使应用组件化，以便于开发管理，从总体上 结构更清晰。
这样一个 界面就可以组件化为：
<div id="app">
  <app-nav></app-nav>
  <app-view>
    <app-sidebar></app-sidebar>
    <app-content></app-content>
  </app-view>
</div>
很类似 angularjs自带的指令，ng-view，实现界面嵌套。

vue.js构造器不是很懂，官网中没有一个例子，百度搜索到的，感觉和官网的定义有点不太一样，更像是自定义一个组件或者元素。

vue属性与方法
每一个vue应用都需要构造器构造一个根实例，好比是根作用域；在此实例中，都会展示（代理）它内部的data字段中的属性。
在外部定义的data对象中含有一个属性 a，属性值为1；则在根实例中的data字段中定义 data：data；
则在根实例中实质代理的是data对象，他也有a属性。
代理的响应式双向的，实例中的属性变化会相应的重新渲染界面中的属性值。若data对象的属性值发生变化，那根实例中的属性值也会改变。
但是 现在是 根实例中的data字段指代的是 data对象，是同名的，会让人模糊。
所以在vue应用中，提供了一些有用的实例属性与方法，这些实例都有前缀 $，一旦出现此前缀，意思就是修改的死根实例中的 字段，例如 $el
同时也提供了 一些实例方法，例如 $watch 用于监听 属性 for example：vm1.$watch('b', function(newVal, oldVal) {//只用在属性b发生变化的时候，才会调用此方法})
vm1 是 vue应用构造的根实例

关于git 又学到了一手，逛知乎的时候，看到的。
在代码提交之前一定要 git diff（svn diff）一下，学会查看代码更改。
之前只是会看一下 代码仓库中的 git状态，现在可以看一下 ，代码具体更改情况了。

实例的生命周期：
1：构造器构造一个实例（声明）
2：钩子函数 beforeCreate
3：观察数据
4：初始化 事件 实例
5：钩子函数 created 实例创建之后被调用
6：是否有el 元素
7：有 是否有template元素
8(yes)：有 将模板渲染
8(no)：没有 将el代指的html界面 作为 模板
9：beforeMount 钩子  实例被挂载之前 调用（何为实例被挂载？）--->el 被新创建的 vm.$el 替换，并挂载到实例上去。
10：mounted钩子 实例被挂载之后使用
11：beforeUpdate 钩子 实例中的属性 有更新 ，在更新之前 调用该 钩子
12：updated钩子 实例中的元素、属性等有更新，更新之后 被调用
13：beforeDestroy 钩子 实例销毁之前调用。在这一步，实例仍然完全可用。
14：destroyed 钩子 实例被销毁后调用，调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。

前端需要学习的前端构建工具和模块管理方式：
前端项目同样面临软件生命周期的各个环节，首先是代码管理，你必须学会使用svn和git。
其次是代码的构建，如今前端代码构建已经不是简单的压缩一下了，需要进行依赖管理、模块合并、各种编译，
必须要学会使用grunt、gulp、webpack、rollup等前端构建工具，
以及前端模块管理的方式，amd，cmd，es6 module 等等。

vue特性：
mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令；
使用v-bind指令，可以：
动态地绑定一个或多个特性，或一个组件 prop 到表达式。
在绑定 class 或 style 特性时，支持其它类型的值，如数组或对象。可以通过下面的教程链接查看详情。
在绑定 prop 时，prop 必须在子组件中声明。可以用修饰符指定不同的绑定类型。
没有参数时，可以绑定到一个包含键值对的对象。注意此时 class 和 style 绑定不支持数组和对象。

在vue中使用js表达式：
和angularjs类似，在双括号中也可以直接使用 javascript表达式；

关于v-bind指令：
<div v-bind:id="'list-' + id">nihao</div>终于弄懂是什么意思了
其实就是 给这个div动态添加一个id名；
后续操作，例如$("#list-test").css("font-size",'24px');

关于 v-bind:class指令：
1，直接定义在 根实例 data中
2，直接在dom节点上 调用 style中的class
3，调用 style中的class和根实例中data中的 定义，多个class
style
.color-1{
				color: #0078A8;
			}
.font-1{
font-size:20px;
}
栗子1：
html
<p v-bind:class="colorA">我的颜色是特殊的</p>
js
new Vue({
				el:'#app',
				data:{
					seen:true,
					hide:false,
					colorA:'color-1'
				}
			})
栗子2：
html
<p v-bind:class="{'color-1':true}">我的颜色是特殊的</p>
栗子3：
html
<p v-bind:class="[fontA,{'color-1':true}]">我的颜色是特殊的</p>
js
new Vue({
				el:'#app',
				data:{
					seen:true,
					hide:false,
					colorA:'color-1',
					fontA:'font-1'
				}
			})
			
Vue.js 包装了被观察数组的变异方法，故它们能触发视图更新。被包装的方法有：push(), pop(), shift(), unshift(), splice(), sort(), reverse()

解决每次git提交时，都要输入密码和用户名
git config --global credential.helper store
☞这一步会在用户目录下生成文件.git-credential记录用户名密码的信息.
☞ git config --global 命令实际上在操作用户目录下的.gitconfig文件, 我们cat一下此文件(cat .gitconfig)
push一次就好了

关于 css属性 特殊前缀
特殊前缀指的就是不同浏览器的标识 例如：（css3）
-moz     Firefox浏览器
-webkit Chrome、Safari
-ms IE浏览器
-o Opera

//add a bio 添加一个个人简历/签名

数组变异方法（更新数组）：
push()
pop()
shift()
unshift()
splice()
sort()
reverse()
数组重塑方法（原数组不变，返回一个新数组）：filter(), concat() 和 slice()